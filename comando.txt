comasdos git 

git init 
para iniciar un nuevo repositorio


git status
para visualizar los archivos disponibles antes de agregarlos al stage

git add . 
para agregarlos y se puedan modificar 
git add (nombrecarpeta/, *.css, el nombre y extencion concreta)

git commit -m "mensage"
para agregar los arvhisvos y señalar los cambios que se realizaron

git checkout .
para regresar ala ultima vercion del codigo y quitar los cambios 

git log 
para visualizar los  commit echos  hasta el momento 

git diff
para que muestre las diferencias en el archivo que seayan modificado

git reset (archivo, extencion, carpeta)
para quitar el archivo del stage

git config --global alias.s "status"
esta es para colocar alias a los comandos dea el q sea para facilidad de escritura

git commit --amend -m "para nuevo mensaje"
este comando es para que se pueda volver a escribir el mensaje que se escribio enel commit


git mv principal.html prin.html 
este comando es para cambiar el nombre de un archivo ya guardado en el stage 

git rm princi.html
 este comando es para remover un archivo 

git ignore 
// para ignorar archivo o carpetas  se tiene que creae un archivo con extencion .gitignore
y en el archivo escribir los nombre de los archivos que no queremos que se lleve su control
pueden ser carpetas 
config*  este significa que todo lo que empieze con config y lo que lleve despues 
/config/  este significa que todo lo que empieze con config

//////////////////////////////////////ccrear ramas y agregarlas al master///////////////////////////////////////////////////////////////////77
git branch nombredelarama
este comando es para agregar una nueva rama al proyecto  

git checkout nombredelarama 
para cambiar de la rama master a la rama secundaria ya echa 

git log --oneline --decorate --all --graph
para mostrar el historial y las ramas echas 

git merge nueva_funcionalidad --osea el nombre de la rama secundaria
esta funcion va permitir unir la rama secundaria con la rama principal master 

git branch -d nueva_funcionalidad
este comando es para borrar la rama secundaria ya que en el comando anterior la unimos a la principal 
si no la agrgeamos ala master y se quiere borrar basta con cambiar -d por -D 


// en dado caso de que al unir con merge salga una ventana que te pide escribir un mensaje hacer lo siguiente 
1.- i --para insertar
2.- escribir mensaje 
3.- esc para escribir comando 
4.- :wq para salir 

yeah
// nota en los conflictos de merge donde se modifican en la rama y se modifica el mismo archivo en el master 
marca un error al querer unir por q son diferentes
asi q se tiene que corregir manuealmente como seria la estructura correcta del archivo y despues ya se puede unir la rama 





//////////////////// etiquetas //////////////////////////////////////////////////////////////////////////////////////////////////////////////7
git tag nombredeetiqueta
esto agregara la etiqueta al ultimo commit echo creo

git tag -d nombredeetiqueta
esto borrar la etiqueta 

git tag -a V1.0.0 -m depende la posicion del valor segun los cambior realizados muy importantes a minimo
este comando permite  agregar notas adiciones a la etiqueta 


git show V1.0.0
este comando mostrara todo lo que lleva hasta el moento de esta etiqueta de vercion

para cuando  quieres establecer una etiqueta en commit anteriores 
git tag -a v0.0.1 idDelTagDondeAbarcaraLaEquiqueta -m "mensaje apartir de la etiqueta"



//////////////////////////// subiraun repositorio vacio a gitHub  ///////////////////////////////////////////////////////

1.- creamos un repositorio en hubhub 
2.- en una carpeta local de lap iniciamos git 
3.- en el repositorio creado te da las instrucciones para agrgear algun cambio de la carpeta local
se tiene que poner el comando git remote add origin direccionlink del repositorio
4.- git push -u origin master // aqui se espesifica bien la rama q se enviara 
te preguntara unuario y clave de github 
se agregaran los cambio en el repositorio github

/////////////// subir un repositorio que ya tienes en local ////////////////////77

1.- desde la carpeta de tu repositorio local 
agrgeargit remote add origin link del repositorio
2.-se puede crear una nueva rama o mandar la master 
3.- git push -u origin master

asi se subira el repositorio local que ya tenias 
////////////////////// clonar repositorio desde github////////////////

en github te da la opcion de clonar unod e tus repositorio esto se usa para trabajr en otra maquina por ejemplo 
1.-te diriges desde la temrinal git ala carpeta donde descargaras el repositorio
2.- pegas el comando que te lo da github el cual es 
ya q lo descrgaste abre la carpeta y ya reconoce los comandos git
ya modificado guardas cambios y usas el comando para push al repositorio

////////////////////////////////// git pull  descargar cambios del repositorio ///////////////////////////////////////////////////////

si se cambia algunas cosas desde la pagina de github te permite agregar un nuevo archivo
en la pestaña de preview te permite ver como lusira el cambio y agregar el nombre del commit q se realizaria
y selecionar la opcion de guardarlo en el master o crear una rama 
- pero estos cambios echos desde la pagina aun no se reflejaran en local

-- como tengo el mismo repositorio en dos carpetas 
1.- tuve que  ponerle pull para que me descargara los cambios echos desde la otra carpeta 
2.- me salio la consola para escribir los cambios y fusionarlos  tuve que agregarle :wq! para que pudiera salir de hay 
ahora me parece q puedo agregar los cambios echosdesde el otro repositorio


//////////////////// repositorio que queremos sacar copias y modificarlo Fork  ---------------------------

practicamente en un repositorio en giyhub le puedes poner fork lo cual te creara un repositorio en tu cuanda local
ahora solo se deve de  clonar en una carpeta local de tu maquina 

////////////////////////////// sugerir cambios a un repositorio de un repositorio de  copiamos ---------------
pull request es una funcion del github donde le mandas al usuario principal del repositorio
los cambios de  sus archivos esto le mada una solicitus donde el vera los cambios y comentarios que le pongas 
lo cual el desidira si agrega los cambios q le mandaron o no y se pueden ir comentado cosas adiacionale 
todo desde github 



 git reset --soft 20e65b434955ebdb65416902a857c2cb694ac463
 este comando es para recuperar la posicion de un ultimo commit nesesita agregar  el id de la ultima vez guadada
 mas aparte para recuperar el archivo es nesesario el comando 

 git reset --hard 20e65b434955ebdb65416902a857c2cb694ac463
 este recupera el archivo y se nesesita comolar el id del commit
 
 git reflog
 este comando es para el historico de lo que se ha cambiado desde git 

 git reset --mixed 20e65b434955ebdb65416902a857c2cb694ac463
 es para sacar del stage un commit y volverlo a modifica por si le faltaba algo  y no borra la informacion que ya tenia 
 es nesesario agregar el id del commit 

 git  reset --soft 20e65b434955ebdb65416902a857c2cb694ac463
 te manda al momento indicado en el ip del summit y no deja ver los ultimo  esto solo te pone en la posicion indicada

git reflog para ver el historia copiar la ultima ip del commit y regresar al punto donde estabamos con todos los cambios 

git reset --hard 20e65b434955ebdb65416902a857c2cb694ac463
este te regresara al ip ingrresado q en este caso es el ultimo cambio que se hizo


// le agregare un cambio a este documento sola para mandar el cambio a github