comasdos git 

git init 
para iniciar un nuevo repositorio


git status
para visualizar los archivos disponibles antes de agregarlos al stage

git add . 
para agregarlos y se puedan modificar 
git add (nombrecarpeta/, *.css, el nombre y extencion concreta)

git commit -m "mensage"
para agregar los arvhisvos y se√±alar los cambios que se realizaron

git checkout .
para regresar ala ultima vercion del codigo y quitar los cambios 

git log 
para visualizar los  commit echos  hasta el momento 

git diff
para que muestre las diferencias en el archivo que seayan modificado

git reset (archivo, extencion, carpeta)
para quitar el archivo del stage

git config --global alias.s "status"
esta es para colocar alias a los comandos dea el q sea para facilidad de escritura

git commit --amend -m "para nuevo mensaje"
este comando es para que se pueda volver a escribir el mensaje que se escribio enel commit


git mv principal.html prin.html 
este comando es para cambiar el nombre de un archivo ya guardado en el stage 

git rm princi.html
 este comando es para remover un archivo 

git ignore 
// para ignorar archivo o carpetas  se tiene que creae un archivo con extencion .gitignore
y en el archivo escribir los nombre de los archivos que no queremos que se lleve su control
pueden ser carpetas 
config*  este significa que todo lo que empieze con config y lo que lleve despues 
/config/  este significa que todo lo que empieze con config

//////////////////////////////////////ccrear ramas y agregarlas al master///////////////////////////////////////////////////////////////////77
git branch nombredelarama
este comando es para agregar una nueva rama al proyecto  

git checkout nombredelarama 
para cambiar de la rama master a la rama secundaria ya echa 

git log --oneline --decorate --all --graph
para mostrar el historial y las ramas echas 

git merge nueva_funcionalidad --osea el nombre de la rama secundaria
esta funcion va permitir unir la rama secundaria con la rama principal master 

git branch -d nueva_funcionalidad
este comando es para borrar la rama secundaria ya que en el comando anterior la unimos a la principal 
si no la agrgeamos ala master y se quiere borrar basta con cambiar -d por -D 


// en dado caso de que al unir con merge salga una ventana que te pide escribir un mensaje hacer lo siguiente 
1.- i --para insertar
2.- escribir mensaje 
3.- esc para escribir comando 
4.- :wq para salir 

yeah
// nota en los conflictos de merge donde se modifican en la rama y se modifica el mismo archivo en el master 
marca un error al querer unir por q son diferentes
asi q se tiene que corregir manuealmente como seria la estructura correcta del archivo y despues ya se puede unir la rama 




//////////////////////////////////////////////////////////////////////////////////////////////////////////////7
 git reset --soft 20e65b434955ebdb65416902a857c2cb694ac463
 este comando es para recuperar la posicion de un ultimo commit nesesita agregar  el id de la ultima vez guadada
 mas aparte para recuperar el archivo es nesesario el comando 

 git reset --hard 20e65b434955ebdb65416902a857c2cb694ac463
 este recupera el archivo y se nesesita comolar el id del commit

 git reflog
 este comando es para el historico de lo que se ha cambiado desde git 

 git reset --mixed 20e65b434955ebdb65416902a857c2cb694ac463
 es para sacar del stage un commit y volverlo a modifica por si le faltaba algo  y no borra la informacion que ya tenia 
 es nesesario agregar el id del commit 

 git  reset --soft 20e65b434955ebdb65416902a857c2cb694ac463
 te manda al momento indicado en el ip del summit y no deja ver los ultimo  esto solo te pone en la posicion indicada

git reflog para ver el historia copiar la ultima ip del commit y regresar al punto donde estabamos con todos los cambios 

git reset --hard 20e65b434955ebdb65416902a857c2cb694ac463
este te regresara al ip ingrresado q en este caso es el ultimo cambio que se hizo